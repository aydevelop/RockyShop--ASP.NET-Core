add model category: 
	Models/Category.cs

add dbcontext:
	namespace Rocky.Data
	{
		public class ApplicationDbContext : DbContext
		{
			public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
			{

			}

			public DbSet<Category> Category { get; set; }
		}
	}

settings:
	{
	  "ConnectionStrings": {
		"DefaultConnection": "Server=.;Database=Rocky;Trusted_Connection=True;MultipleActiveResultSets=true"
	  },

nuget:
	Microsoft.EntityFrameworkCore.SqlServer

add config:
	public void ConfigureServices(IServiceCollection services)
	{
		services.AddDbContext<ApplicationDbContext>(options => options.UseSqlServer(
		 Configuration.GetConnectionString("DefaultConnection")));



migration:
	((dotnet -info
	dotnet tool install --global dotnet-ef --version 5.0.3 (dotnet tool update --global dotnet-ef)
	dotnet ef -h
	dotnet tool list -g))
	
	dotnet tool update --global dotnet-ef
	
	dotnet ef migrations add AddCategoryToDatabase
	dotnet ef database update
	
get data:
	public class CategoryController : Controller
    {
        private readonly ApplicationDbContext _db;
        public CategoryController(ApplicationDbContext db)
        {
            _db = db;
        }

        public IActionResult Index()
        {
            IEnumerable<Category> objList = _db.Category;
			
________________________________________________________________________________________________________
			
dotnet ef migrations add AddApplicationTypeToDatabase
dotnet ef database update		

SESSION:
1:::
	services.AddHttpContextAccessor();
	services.AddSession(Options =>
	{
		Options.IdleTimeout = TimeSpan.FromMinutes(10);
		Options.Cookie.HttpOnly = true;
		Options.Cookie.IsEssential = true;
	});

2:::
	app.UseSession();
	app.UseEndpoints(endpoints =>
    {
	
3:::
	public static class SessionExtensions
    {
        public static void Set<T>(this ISession session, string key, T value)
        {
            session.SetString(key, JsonSerializer.Serialize(value));
        }

        public static T Get<T>(this ISession session, string key)
        {
            var value = session.GetString(key);
            return value == null ? default : JsonSerializer.Deserialize<T>(value);
        }
    }
4:::
	[_Layout.cshtml]
	@using Microsoft.AspNetCore.Http
	@inject IHttpContextAccessor HttpContextAccessor
	@using Rocky.Utility
5:::
	@if (HttpContextAccessor.HttpContext.Session.Get<List<ShoppingCart>>(Env.SessionCart) != null)
	{
		<a asp-action="Index" asp-controller="Cart" class="nav-link">
			@{ var count = HttpContextAccessor.HttpContext.Session.Get<List<ShoppingCart>>(Env.SessionCart).Count; }
			<i class="fas fa-shopping-cart"></i> &nbsp; (@count)
		</a> 
	}
6:::		
	[HttpPost, ActionName("Details")]
	public IActionResult DetailsPost(int id)
	{
		List<ShoppingCart> shoppingCartList = new List<ShoppingCart>();
		if (HttpContext.Session.Get<IEnumerable<ShoppingCart>>(Env.SessionCart) != null
			&& HttpContext.Session.Get<IEnumerable<ShoppingCart>>(Env.SessionCart).Count() > 0)
		{
			shoppingCartList = HttpContext.Session.Get<List<ShoppingCart>>(Env.SessionCart);
		}
		shoppingCartList.Add(new ShoppingCart { ProductId = id });
		HttpContext.Session.Set(Env.SessionCart, shoppingCartList);
		return RedirectToAction(nameof(Index));
	}

________________________________________________________________________________________________________
Identity

1:::
	public class ApplicationDbContext : IdentityDbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options)
        {
		
2:::
    services.AddIdentity<IdentityUser, IdentityRole>()
		  .AddDefaultTokenProviders()
		  .AddDefaultUI()
		  .AddEntityFrameworkStores<ApplicationDbContext>();


3:::
	app.UseRouting();
	app.UseAuthentication();
	app.UseAuthorization();
4:::
	dotnet ef migrations add ScaffoldIdentity
	dotnet ef database update
5:::
	Add New Scaffolded Item > Identity -> [Override all files + select _Layout.cshtml + select DBContext]
6:::
	public void ConfigureServices(IServiceCollection services)
    {services.AddRazorPages();

	app.UseEndpoints(endpoints =>
	{endpoints.MapRazorPages();
7::
	 <partial name="_LoginPartial" />
	 
	 
________________________________________________________________________________________________________
Modify identity table (add FullName column)

1:::
namespace Rocky.Models
{
    public class ApplicationUser : IdentityUser
    {
        public string FullName { get; set; }
    }
}

2:::
public DbSet<ApplicationUser> ApplicationUser { get; set; }

3:::
	dotnet ef migrations add AddCategoryToDatabase
	dotnet ef database update
	
________________________________________________________________________________________________________
Role Manager

1:::
      public RegisterModel(
            UserManager<IdentityUser> userManager,
            SignInManager<IdentityUser> signInManager,
            ILogger<RegisterModel> logger,
            IEmailSender emailSender, RoleManager<IdentityRole> roleManager)
        {
            _roleManager = roleManager;
			
2:::
	  public async Task OnGetAsync(string returnUrl = null)
        {
            if(!await _roleManager.RoleExistsAsync(Env.AdminRole))
            {
                await _roleManager.CreateAsync(new IdentityRole(Env.AdminRole));
                await _roleManager.CreateAsync(new IdentityRole(Env.CustomerRole));
            }
			
3:::
	  services.AddIdentity<IdentityUser, IdentityRole>()
	  
4:::
	 if (result.Succeeded)
                {
                    await _userManager.AddToRoleAsync(user, Env.AdminRole);
					
5:::
	//await _userManager.AddToRoleAsync(user, Env.AdminRole);
	if (User.IsInRole(Env.AdminRole))
	{
		//admin try to create a new user
		await _userManager.AddToRoleAsync(user, Env.AdminRole);
	}
	else
	{
		await _userManager.AddToRoleAsync(user, Env.CustomerRole);
	}
	
6:::
	@if (User.IsInRole(Rocky.Env.AdminRole))
	{
		<button type="submit" class="btn btn-primary">Register Admin User</button>
	}
	else
	{
		<button type="submit" class="btn btn-primary">Register</button>
	}

					